---
# Oracle MCP Server ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oracle-mcp-server
  labels:
    app: oracle-mcp-server
    component: mcp-server
---
# Oracle MCP Server Role for accessing secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: oracle-mcp-server-secret-reader
  namespace: arhkp-oracle-db-tpcds-loader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  resourceNames: ["oracle23ai"]
---
# Oracle MCP Server RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: oracle-mcp-server-secret-reader
  namespace: arhkp-oracle-db-tpcds-loader
subjects:
- kind: ServiceAccount
  name: oracle-mcp-server
  namespace: loki-toolhive-oracle-mcp
roleRef:
  kind: Role
  name: oracle-mcp-server-secret-reader
  apiGroup: rbac.authorization.k8s.io
---
# Oracle MCP Server Deployment for OpenShift using Oracle SQLcl
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oracle-mcp-server
  labels:
    app: oracle-mcp-server
    component: mcp-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oracle-mcp-server
  template:
    metadata:
      labels:
        app: oracle-mcp-server
        component: mcp-server
    spec:
      serviceAccountName: oracle-mcp-server
      containers:
      - name: oracle-mcp-server
        image: container-registry.oracle.com/database/sqlcl:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: ORACLE_HOME
          value: "/opt/oracle/sqlcl"
        - name: PATH
          value: "/opt/oracle/sqlcl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        - name: JAVA_HOME
          value: "/opt/oracle/sqlcl/lib"
        # Oracle connection environment variables from secret
        - name: ORACLE_USER
          valueFrom:
            secretKeyRef:
              name: oracle23ai
              key: host
        - name: ORACLE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: oracle23ai
              key: password
        - name: ORACLE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: oracle23ai
              key: tns-uri
        - name: ORACLE_HOST
          valueFrom:
            secretKeyRef:
              name: oracle23ai
              key: host
        - name: ORACLE_PORT
          valueFrom:
            secretKeyRef:
              name: oracle23ai
              key: port
        - name: ORACLE_SERVICE_NAME
          valueFrom:
            secretKeyRef:
              name: oracle23ai
              key: serviceName
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        # Since SQLcl uses stdio protocol, we'll create a simple HTTP wrapper
        # This allows the stdio-based MCP server to be accessible via HTTP
        command: ["/bin/bash"]
        args: ["-c", "echo 'Oracle MCP Server (SQLcl) ready for stdio connections'; while true; do sleep 30; done"]
        # No HTTP probes since this is stdio-based MCP server
      restartPolicy: Always
---
# Oracle MCP Server Service
apiVersion: v1
kind: Service
metadata:
  name: oracle-mcp-server
  labels:
    app: oracle-mcp-server
    component: mcp-server
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: oracle-mcp-server
---
# Oracle MCP Server Route (OpenShift specific)
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: oracle-mcp-server
  labels:
    app: oracle-mcp-server
    component: mcp-server
spec:
  to:
    kind: Service
    name: oracle-mcp-server
    weight: 100
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
